/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
	// Apply the java-library plugin to add support for Java Library
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'jacoco'
	id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
	id "com.diffplug.spotless" version "8.0.0"
}

group = 'com.meilisearch.sdk'
version = '0.16.1'

base {
	archivesName.set('meilisearch-java')
}

jacoco {
  toolVersion = "0.8.8"
  reportsDirectory = layout.buildDirectory.dir("$projectDir/tmp/coverage")
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.30
			}
		}
	}
}

repositories {
	mavenCentral()
}

configurations {
	testCompile.extendsFrom compileOnly
}

dependencies {
	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
	implementation 'com.google.code.gson:gson:2.13.1'
	implementation 'org.json:json:20250517'
	// https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5
	api 'com.squareup.okhttp3:okhttp:4.12.0'

	// Use JUnit test framework
	testImplementation(platform('org.junit:junit-bom:5.13.0'))
	testImplementation('org.junit.jupiter:junit-jupiter:5.13.0')
	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testImplementation 'org.mockito:mockito-core:4.11.0'
	testImplementation 'org.hamcrest:hamcrest:3.0'
	testImplementation 'com.squareup.okio:okio:3.12.0'
	testImplementation 'com.squareup.okhttp3:okhttp:4.12.0'
	testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'

	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.19.0'

	// Lombok
	compileOnly 'org.projectlombok:lombok:1.18.38'
	annotationProcessor 'org.projectlombok:lombok:1.18.38'
	testCompileOnly 'org.projectlombok:lombok:1.18.38'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

	// Jwt
	implementation 'com.auth0:java-jwt:4.5.0'
}

task buildJar(type: Jar) {
	archiveBaseName = 'meilisearch-java'
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	{
		exclude 'META-INF/*.SF'
		exclude 'META-INF/*.DSA'
		exclude 'META-INF/*.RSA'
	}
	with jar
}

test {
	useJUnitPlatform {
			excludeTags 'integration'
	}
	finalizedBy jacocoTestReport
	testLogging {
			events 'passed', 'skipped', 'failed'
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir("$projectDir/tmp/test-reports")
	}
	finalizedBy jacocoTestCoverageVerification
}

task integrationTest(type: Test) {
	useJUnitPlatform {
		includeTags 'integration'
	}
	testLogging {
		events 'passed', 'skipped', 'failed'
		showStandardStreams = System.getenv('DEBUG') != null
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withJavadocJar()
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = 'meilisearch-java'
			from components.java
			pom {
				name = 'com.meilisearch.sdk:meilisearch-java'
				packaging = 'jar'
				artifactId = 'meilisearch-java'
				description = 'Meilisearch is a powerful, fast, open-source, easy to use and deploy search engine.'
				url = 'https://github.com/meilisearch/meilisearch-java'
				scm {
					connection = 'scm:git:git://github.com/meilisearch/meilisearch-java.git'
					developerConnection = 'scm:git:ssh://github.com:meilisearch/meilisearch-java.git'
					url = 'http://github.com/meilisearch/meilisearch-java'
				}
				licenses {
					license {
						name = 'MIT License'
						url = 'http://www.opensource.org/licenses/mit-license.php'
					}
				}
				developers {
					developer {
						id = 'eskombro'
						name = 'Samuel Jimenez'
						email = 'samuel@meilisearch.com'
					}
				}
			}
		}
	}
}

nexusPublishing {
	repositories {
		sonatype {
			// Point to new Central Portal staging API (replaces oss.sonatype.org)
			nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
			snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
			// Credentials: use Central Portal token (username/password)
			username.set(System.getenv("MAVEN_CENTRAL_USERNAME"))  // portal token user
			password.set(System.getenv("MAVEN_CENTRAL_PASSWORD"))  // portal token password
			// packageGroup or stagingProfileId not needed if using nexus-publish-plugin
		}
	}
}

signing {
	useInMemoryPgpKeys(System.getenv("MAVEN_CENTRAL_SIGNING_KEY"), System.getenv("MAVEN_CENTRAL_SIGNING_PASSWORD"))
	sign(publishing.publications["mavenJava"])
}

javadoc {
	if(JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

spotless {

	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.10.0').aosp()
	}
}

testing {
	suites {
		test {
			useJUnitJupiter()
		}
	}
}
