# This code-samples file is used by the Meilisearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
  client.getIndex("movies");
list_all_indexes_1: |-
  client.getAllIndexes();
create_an_index_1: |-
  client.createIndex("movies", "movie_id");
update_an_index_1: |-
  client.updateIndex("movies", "movie_review_id");
delete_an_index_1: |-
  client.deleteIndex("movies");
get_one_document_1: |-
  client.index("movies").getDocument("25684");
get_documents_1: |-
  client.index("movies").getDocuments();
add_or_replace_documents_1: |-
  client.index("movies").addDocuments("[{"
    + "\"id\": 287947,"
    + "\"title\": \"Shazam\","
    + "\"poster\": \"https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg\","
    + "\"overview\": \"A boy is given the ability to become an adult superhero in times of need with a single magic word.\","
    + "\"release_date\": \"2019-03-23\""
    + "}]"
  );
add_or_update_documents_1: |-
  client.index("movies").updateDocuments("[{
    + "\"id\": 287947,"
    + "\"title\": \"Shazam ⚡️\","
    + "\"genres\": \"comedy\""
    + "}]"
  );
delete_all_documents_1: |-
  client.index("movies").deleteAllDocuments();
delete_one_document_1: |-
  client.index("movies").deleteDocument("25684");
delete_documents_1: |-
  client.index("movies").deleteDocuments(Arrays.asList(new String[]
  {
    "23488",
    "153738",
    "437035",
    "363869"
  }));
search_post_1: |-
  client.index("movies").search("American ninja");
get_task_by_index_1: |-
  client.index("movies").getTask(1);
get_all_tasks_1: |-
  client.getTasks();
get_task_1: |-
  client.getTask(1);
get_all_tasks_by_index_1: |-
  client.index("movies").getTasks();
get_one_key_1: |-
  client.getKey("d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4");
get_all_keys_1: |-
  client.getKeys();
create_a_key_1: |-
  SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
  Date dateParsed = format.parse("2042-04-02T00:42:42Z");

  Key keyInfo = new Key();

  keyInfo.setDescription("Add documents: Products API key");
  keyInfo.setActions(new String[] {"documents.add"});
  keyInfo.setIndexes(new String[] {"products"});
  keyInfo.setExpiresAt(dateParsed);

  client.createKey(keyInfo);
update_a_key_1: |-
  //Not yet implemented
delete_a_key_1: |-
  client.deleteKey("d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4")
get_settings_1: |-
  client.index("movies").getSettings();
update_settings_1: |-
  Settings settings = new Settings();
  settings.setRankingRules(
    new String[] {
        "typo",
        "words",
        "sort",
        "proximity",
        "attribute",
        "exactness",
        "release_date:desc",
        "rank:desc"
    });
  settings.setDistinctAttribute("movie_id");
  settings.setSearchableAttributes(
    new String[] {
      "title",
      "description",
      "genre"
    });
  settings.setDisplayedAttributes(
    new String[] {
      "title",
      "description",
      "genre",
      "release_date"
    });
  settings.setStopWords(
    new String[] {
      "the",
      "a",
      "an"
    });
  settings.setSortableAttributes(
    new String[] {
      "title",
      "release_date"
    });
  HashMap<String, String[]> synonyms = new HashMap<String, String[]>();
  synonyms.put("wolverine", new String[] {"xmen", "logan"});
  synonyms.put("logan", new String[] {"wolverine"});
  settings.setSynonyms(synonyms);
  client.index("movies").updateSettings(settings);
reset_settings_1: |-
  client.index("movies").resetSettings();
get_synonyms_1: |-
  client.index("movies").getSynonyms();
update_synonyms_1: |-
  HashMap<String, String[]> synonyms = new HashMap<String, String[]>();
  synonyms.put("wolverine", new String[] {"xmen", "logan"});
  synonyms.put("logan", new String[] {"wolverine"});
  client.index("movies").updateSynonymsSettings(synonyms);
reset_synonyms_1: |-
  client.index("movies").resetSynonymsSettings();
get_stop_words_1: |-
  client.index("movies").getStopWords();
update_stop_words_1: |-
  client.index("movies").updateStopWordsSettings(new String[] {"of", "the", "to"});
reset_stop_words_1: |-
  client.index("movies").resetStopWordsSettings();
get_ranking_rules_1: |-
  client.index("movies").getRankingRules();
update_ranking_rules_1: |-
  Settings settings = new Settings();
  settings.setRankingRules(new String[]
  {
    "words",
    "typo",
    "proximity",
    "attribute",
    "sort",
    "exactness",
    "release_date:asc",
    "rank:desc"
  });
  client.index("movies").updateSettings(settings);
reset_ranking_rules_1: |-
  client.index("movies").resetRankingRuleSettings();
get_distinct_attribute_1: |-
  client.index("shoes").getDistinctAttribute();
update_distinct_attribute_1: |-
  client.index("shoes").updateDistinctAttributeSettings("skuid");
reset_distinct_attribute_1: |-
  client.index("shoes").resetDistinctAttributeSettings();
get_searchable_attributes_1: |-
  client.index("movies").getSearchableAttributes();
update_searchable_attributes_1: |-
  client.index("movies").updateSearchableAttributesSettings(new String[]
  {
    "title",
    "description",
    "genre"
  });
reset_searchable_attributes_1: |-
  client.index("movies").resetSearchableAttributesSettings();
get_filterable_attributes_1: |-
  client.index("movies").getFilterableAttributes();
update_filterable_attributes_1: |-
  Settings settings = new Settings();
  settings.setFilterableAttributes(new String[] {"genres", "director"});
  client.index("movies").updateSettings(settings);
reset_filterable_attributes_1: |-
  //Not yet implemented
get_displayed_attributes_1: |-
  client.index("movies").getDisplayedAttributes();
update_displayed_attributes_1: |-
  client.index("movies").updateDisplayedAttributesSettings(new String[]
  {
    "title",
    "description",
    "genre",
    "release_date"
  });
reset_displayed_attributes_1: |-
  client.index("movies").resetDisplayedAttributesSettings();
get_index_stats_1: |-
  client.index("movies").getStats();
get_indexes_stats_1: |-
  client.getStats();
get_health_1: |-
  client.health();
get_version_1: |-
  client.getVersion();
distinct_attribute_guide_1: |-
  Settings settings = new Settings();
  settings.setDistinctAttribute("product_id");
  client.index("jackets").updateSettings(settings);
field_properties_guide_searchable_1: |-
  Settings settings = new Settings();
  settings.setSearchableAttributes(new String[]
  {
    "title",
    "description",
    "genre"
  });
  client.index("movies").updateSettings(settings);
field_properties_guide_displayed_1: |-
  Settings settings = new Settings();
  settings.setDisplayedAttributes(new String[]
  {
    "title",
    "description",
    "genre",
    "release_date"
  });
  client.index("movies").updateSettings(settings);
filtering_guide_1: |-
  SearchRequest searchRequest =
    new SearchRequest("Avengers").setFilter(new String[] {"release_date > \"795484800\""});
  client.index("movies").search(searchRequest);
filtering_guide_2: |-
  SearchRequest searchRequest =
    new SearchRequest("Batman").setFilter(new String[] {"release_date > 795484800 AND (director = \"Tim Burton\" OR director = \"Christopher Nolan\")"});
  client.index("movies").search(searchRequest);
filtering_guide_3: |-
  SearchRequest searchRequest =
    new SearchRequest("horror").setFilter(new String[] {"director = \"Jordan Peele\""});
  client.index("movies").search(searchRequest);
filtering_guide_4: |-
  SearchRequest searchRequest =
    new SearchRequest("Planet of the Apes").setFilter(new String[] {"rating >= 3 AND (NOT director = \"Tim Burton\")"});
  client.index("movies").search(searchRequest);
search_parameter_guide_query_1: |-
  client.index("movies").search("shifu");
search_parameter_guide_offset_1: |-
  SearchRequest searchRequest = new SearchRequest("shifu").setOffset(1);
  client.index("movies").search(searchRequest);
search_parameter_guide_limit_1: |-
  SearchRequest searchRequest = new SearchRequest("shifu").setLimit(2);
  client.index("movies").search(searchRequest);
search_parameter_guide_retrieve_1: |-
  SearchRequest searchRequest =
    new SearchRequest("a").setAttributesToRetrieve(new String[] {"overview", "title"});
  client.index("movies").search(searchRequest);
search_parameter_guide_crop_1: |-
  SearchRequest searchRequest =
    new SearchRequest("shifu")
      .setAttributesToCrop(new String[] {"overview"})
      .setCropLength(10);
  client.index("movies").search(searchRequest);
search_parameter_guide_highlight_1: |-
  SearchRequest searchRequest =
    new SearchRequest("and").setAttributesToHighlight(new String[] {"overview"});
  client.index("movies").search(searchRequest);
search_parameter_guide_filter_1: |-
  SearchRequest searchRequest =
    new SearchRequest("n").setFilter(new String[] {"title = Nightshift"});
  client.index("movies").search(searchRequest);
search_parameter_guide_filter_2: |-
  SearchRequest searchRequest =
    new SearchRequest("n").setFilter(new String[] {"title = \"Kung Fu Panda\""});
  client.index("movies").search(searchRequest);
search_parameter_guide_matches_1: |-
  SearchRequest searchRequest = new SearchRequest("winter feast").setMatches(true);
  SearchResult searchResult = index.search(searchRequest);
settings_guide_synonyms_1: |-
  Settings settings = new Settings();
  HashMap<String, String[]> synonyms = new HashMap<String, String[]>();
  synonyms.put("sweater", new String[] {"jumper"});
  synonyms.put("jumper", new String[] {"sweater"});
  settings.setSynonyms(synonyms);
  client.index("tops").updateSettings(settings);
settings_guide_stop_words_1: |-
  Settings settings = new Settings();
  settings.setStopWords(new String[]
  {
    "the",
    "a",
    "an"
  });
  client.index("movies").updateSettings(settings);
settings_guide_ranking_rules_1: |-
  Settings settings = new Settings();
  settings.setRankingRules(new String[]
  {
    "words",
    "typo",
    "proximity",
    "attribute",
    "sort",
    "exactness",
    "release_date:asc",
    "rank_desc"
  });
  client.index("movies").updateSettings(settings);
settings_guide_distinct_1: |-
  Settings settings = new Settings();
  settings.setDistinctAttribute("product_id");
  client.index("jackets").updateSettings(settings);
settings_guide_searchable_1: |-
  Settings settings = new Settings();
  settings.setSearchableAttributes(new String[]
  {
    "title",
    "description",
    "genre"
  });
  client.index("movies").updateSettings(settings);
settings_guide_displayed_1: |-
  Settings settings = new Settings();
  settings.setDisplayedAttributes(new String[]
  {
    "title",
    "description",
    "genre",
    "release_date"
  });
  client.index("movies").updateSettings(settings);
settings_guide_sortable_1: |-
  Settings settings = new Settings();
  settings.setSortableAttributes(new String[]
  {
    "author",
    "price",
  });
  client.index("books").updateSettings(settings);
documents_guide_add_movie_1: |-
  client.index("movies").addDocuments("[{
    + "\"movie_id\": 123sq178,"
    + "\"title\": \"Amelie Poulain\""
    + "}]"
  );
search_guide_1: |-
  SearchRequest searchRequest = new SearchRequest("shifu").setOffset(5).setLimit(10);
  client.index("movies").search(searchRequest);
search_guide_2: |-
  SearchRequest searchRequest =
    new SearchRequest("Avengers").setFilter(new String[] {"release_date > \"795484800\""});
  client.index("movies").search(searchRequest);
getting_started_add_documents_md: |-
  **Maven**
  Add the following code to the `<dependencies>` section of your project:
  ```xml
  <dependency>
    <groupId>com.meilisearch.sdk</groupId>
    <artifactId>meilisearch-java</artifactId>
    <version>0.7.0</version>
    <type>pom</type>
  </dependency>
  ```

  **Gradle**
  Add the following line to the `dependencies` section of your `build.gradle`:
  ```groovy
  implementation 'com.meilisearch.sdk:meilisearch-java:0.7.0'
  ```

  ```java
  import com.meilisearch.sdk;
  import java.nio.file.Files;
  import java.nio.file.Path;

  Path fileName = Path.of("movies.json");
  String moviesJson = Files.readString(fileName);
  Client client = new Client(new Config("http://127.0.0.1:7700", "masterKey"));
  Index index = client.index("movies");
  index.addDocuments(moviesJson);
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-java)
getting_started_search_md: |-
  ```java
  client.index("movies").search("botman");
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-java)
faceted_search_update_settings_1: |-
  client.index("movies").updateFilterableAttributesSettings(new String[]
  {
    "director",
    "genres"
  });
faceted_search_filter_1: |-
  SearchRequest searchRequest =
    new SearchRequest("thriller").setFilterArray(new String[][] {
      new String[] {"genres = Horror", "genres = Mystery"},
      new String[] {"director = \"Jordan Peele\""}});
  client.index("movies").search(searchRequest);
faceted_search_facets_distribution_1: |-
  SearchRequest searchRequest =
    new SearchRequest("Batman").setFacetsDistribution(new String[] {"genres"});
  client.index("movies").search(searchRequest);
faceted_search_walkthrough_filterable_attributes_1: |-
  client.index("movies").updateFilterableAttributesSettings(new String[]
  {
    "director",
    "producer",
    "genres",
    "production_companies"
  });
faceted_search_walkthrough_filter_1: |-
  SearchRequest searchRequest =
    new SearchRequest("thriller").setFilterArray(new String[][] {
      new String[] {"genres = Horror", "genres = Mystery"},
      new String[] {"director = \"Jordan Peele\""}});
  client.index("movies").search(searchRequest);
faceted_search_walkthrough_facets_distribution_1: |-
  SearchRequest searchRequest =
    new SearchRequest("Batman").setFacetsDistribution(new String[] {"genres"});
  client.index("movies").search(searchRequest);
add_movies_json_1: |-
  import com.meilisearch.sdk;
  import org.json.JSONArray;
  import java.nio.file.Files;
  import java.nio.file.Path;

  Path fileName = Path.of("movies.json");
  String moviesJson = Files.readString(fileName);
  Client client = new Client(new Config("http://127.0.0.1:7700", "masterKey"));
  Index index = client.index("movies");
  index.addDocuments(moviesJson);
post_dump_1: |-
  client.createDump();
get_dump_status_1: |-
  client.getDumpStatus("20201101-110357260");
phrase_search_1: |-
  client.index("movies").search("\"african american\" horror");
sorting_guide_update_sortable_attributes_1: |-
  Settings settings = new Settings();
  settings.setSortableAttributes(new String[] {"price", "author"});
  client.index("books").updateSettings(settings);
sorting_guide_update_ranking_rules_1: |-
  Settings settings = new Settings();
  settings.setRankingRules(new String[]
  {
    "words",
    "sort",
    "typo",
    "proximity",
    "attribute",
    "exactness"
  });
  client.index("books").updateSettings(settings);
sorting_guide_sort_parameter_1: |-
  SearchRequest searchRequest = new SearchRequest("science fiction").setSort(new String[] {"price:asc"});
  client.index("books").search(searchRequest);
sorting_guide_sort_parameter_2: |-
  SearchRequest searchRequest = new SearchRequest("butler").setSort(new String[] {"author:desc"});
  client.index("books").search(searchRequest);
get_sortable_attributes_1: |-
  client.index("books").getSortableAttributes();
update_sortable_attributes_1: |-
  Settings settings = new Settings();
  settings.setSortableAttributes(new String[] {"price", "author"});
  client.index("books").updateSettings(settings);
reset_sortable_attributes_1: |-
  //Not yet implemented
search_parameter_guide_sort_1: |-
  SearchRequest searchRequest = new SearchRequest("science fiction").setSort(new String[] {"price:asc"});
  client.index("search_parameter_guide_sort_1").search(searchRequest);
geosearch_guide_filter_settings_1: |-
  Settings settings = new Settings();
  settings.setFilterableAttributes(new String[] {"_geo"});
  client.index("restaurants").updateSettings(settings);
geosearch_guide_filter_usage_1: |-
  SearchRequest searchRequest =
    new SearchRequest("").setFilter(new String[] {"_geoRadius(45.4628328, 9.1076931, 2000)"});
  client.index("restaurants").search(searchRequest);
geosearch_guide_filter_usage_2: |-
  SearchRequest searchRequest =
    new SearchRequest("").setFilter(new String[] {"_geoRadius(45.4628328, 9.1076931, 2000) AND type = pizza"});
  client.index("restaurants").search(searchRequest);
geosearch_guide_sort_settings_1: |-
  Settings settings = new Settings();
  settings.setSortableAttributes(new String[] {"_geo"});
  client.index("restaurants").updateSettings(settings);
geosearch_guide_sort_usage_1: |-
  SearchRequest searchRequest =
    new SearchRequest("").setSort(new String[] {"_geoPoint(48.8583701,2.2922926):asc"});
  client.index("restaurants").search(searchRequest);
geosearch_guide_sort_usage_2: |-
  SearchRequest searchRequest =
    new SearchRequest("").setSort(new String[] {
      "_geoPoint(48.8583701,2.2922926):asc",
      "rating:desc",
    });
  client.index("restaurants").search(searchRequest);
security_guide_search_key_1: |-
  Client client = new Client(new Config("http://127.0.0.1:7700", "apiKey"));
  client.index("patient_medical_records").search();
security_guide_update_key_1: |-
  //Not yet implemented
security_guide_create_key_1: |-
  Client client = new Client(new Config("http://127.0.0.1:7700", "masterKey"));

  SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
  Date dateParsed = format.parse("2023-01-01T00:00:00Z");

  Key keyInfo = new Key();

  keyInfo.setDescription("Search patient records key");
  keyInfo.setActions(new String[] {"search"});
  keyInfo.setIndexes(new String[] {"patient_medical_records"});
  keyInfo.setExpiresAt(dateParsed);

  client.createKey(keyInfo);
security_guide_list_keys_1: |-
  Client client = new Client(new Config("http://127.0.0.1:7700", "masterKey"));
  client.getKeys();
security_guide_delete_key_1: |-
  Client client = new Client(new Config("http://127.0.0.1:7700", "masterKey"));
  client.deleteKey("d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4");
authorization_header_1: |-
  Client client = new Client(new Config("http://127.0.0.1:7700", "masterKey"));
  client.getKeys();
