# This code-samples file is used by the Meilisearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
  client.getIndex("movies");
list_all_indexes_1: |-
  IndexesQuery query = new IndexesQuery().setLimit(3);
  client.getIndexes(query);
create_an_index_1: |-
  client.createIndex("movies", "id");
update_an_index_1: |-
  client.updateIndex("movies", "id");
delete_an_index_1: |-
  client.deleteIndex("movies");
swap_indexes_1: |-
  SwapIndexesParams[] params =
          new SwapIndexesParams[] {
              new SwapIndexesParams().setIndexes(new String[] {"indexA", "indexB"}),
              new SwapIndexesParams().setIndexes(new String[] {"indexX", "indexY"})
          };
  TaskInfo task = client.swapIndexes(params);
get_one_document_1: |-
  DocumentQuery query = new DocumentQuery().setFields(new String[] {"id", "title", "poster", "release_date"});
  client.index("movies").getDocument("25684", query);
get_documents_1: |-
  DocumentsQuery query = new DocumentsQuery().setLimit(2);
  client.index("movies").getDocuments(query);
add_or_replace_documents_1: |-
  client.index("movies").addDocuments("[{"
    + "\"id\": 287947,"
    + "\"title\": \"Shazam\","
    + "\"poster\": \"https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg\","
    + "\"overview\": \"A boy is given the ability to become an adult superhero in times of need with a single magic word.\","
    + "\"release_date\": \"2019-03-23\""
    + "}]"
  );
add_or_update_documents_1: |-
  client.index("movies").updateDocuments("[{
    + "\"id\": 287947,"
    + "\"title\": \"Shazam ⚡️\","
    + "\"genres\": \"comedy\""
    + "}]"
  );
delete_all_documents_1: |-
  client.index("movies").deleteAllDocuments();
delete_one_document_1: |-
  client.index("movies").deleteDocument("25684");
delete_documents_1: |-
  client.index("movies").deleteDocuments(Arrays.asList(new String[]
  {
    "23488",
    "153738",
    "437035",
    "363869"
  }));
search_post_1: |-
  client.index("movies").search("American ninja");
get_all_tasks_1: |-
  client.getTasks();
get_task_1: |-
  client.getTask(1);
get_all_tasks_filtering_1: |-
  client.index("movies").getTasks();
delete_tasks_1: |-
  DeleteTasksQuery query = new DeleteTasksQuery().setUids(new int[] {1, 2})
  client.deleteTasks(query);
cancel_tasks_1: |-
  CancelTasksQuery query = new CancelTasksQuery().setUids(new int[] {1, 2})
  client.cancelTasks(query);
get_all_tasks_filtering_2: |-
  TasksQuery query = new TasksQuery()
        .setStatus(new String[] {"succeeded", "failed"})
        .setType(new String[] {documentAdditionOrUpdate});

  client.index("movies").getTasks(query);
get_all_tasks_paginating_1: |-
  TasksQuery query = new TasksQuery()
        .setLimit(2)
        .setFrom(10);

  client.index("movies").getTasks(query);
get_all_tasks_paginating_2: |-
  TasksQuery query = new TasksQuery()
        .setLimit(2)
        .setFrom(8);

  client.index("movies").getTasks(query);
get_one_key_1: |-
  client.getKey("6062abda-a5aa-4414-ac91-ecd7944c0f8d");
get_all_keys_1: |-
  KeysQuery query = new KeysQuery().setLimit(3);
  client.getKeys(query);
create_a_key_1: |-
  SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
  Date dateParsed = format.parse("2042-04-02T00:42:42Z");

  Key keyInfo = new Key();

  keyInfo.setDescription("Add documents: Products API key");
  keyInfo.setActions(new String[] {"documents.add"});
  keyInfo.setIndexes(new String[] {"products"});
  keyInfo.setExpiresAt(dateParsed);

  client.createKey(keyInfo);
update_a_key_1: |-
  KeyUpdate keyChanges = new KeyUpdate();
  keyChanges.setName("Products/Reviews API key");
  keyChanges.setDescription("Manage documents: Products/Reviews API key");

  client.updateKey("6062abda-a5aa-4414-ac91-ecd7944c0f8d", keyChanges);
delete_a_key_1: |-
  client.deleteKey("6062abda-a5aa-4414-ac91-ecd7944c0f8d")
get_settings_1: |-
  client.index("movies").getSettings();
update_settings_1: |-
  Settings settings = new Settings();
  settings.setRankingRules(
    new String[] {
        "words",
        "typo",
        "proximity",
        "attribute",
        "sort",
        "exactness",
        "release_date:desc",
        "rank:desc"
    });
  settings.setDistinctAttribute("movie_id");
  settings.setSearchableAttributes(
    new String[] {
      "title",
      "overview",
      "genres"
    });
  settings.setDisplayedAttributes(
    new String[] {
      "title",
      "overview",
      "genres",
      "release_date"
    });
  settings.setStopWords(
    new String[] {
      "the",
      "a",
      "an"
    });
  settings.setSortableAttributes(
    new String[] {
      "title",
      "release_date"
    });

  HashMap<String, String[]> synonyms = new HashMap<String, String[]>();
  synonyms.put("wolverine", new String[] {"xmen", "logan"});
  synonyms.put("logan", new String[] {"wolverine"});
  settings.setSynonyms(synonyms);

  HashMap<String, Integer> minWordSizeTypos =
    new HashMap<String, Integer>() {
      {
        put("oneTypo", 8);
        put("twoTypos", 10);
      }
    };
  TypoTolerance typoTolerance = new TypoTolerance();
  typoTolerance.setMinWordSizeForTypos(minWordSizeTypos);
  settings.setTypoTolerance(typoTolerance);

  client.index("movies").updateSettings(settings);
reset_settings_1: |-
  client.index("movies").resetSettings();
get_synonyms_1: |-
  client.index("movies").getSynonymsSettings();
update_synonyms_1: |-
  HashMap<String, String[]> synonyms = new HashMap<String, String[]>();
  synonyms.put("wolverine", new String[] {"xmen", "logan"});
  synonyms.put("logan", new String[] {"wolverine"});
  client.index("movies").updateSynonymsSettings(synonyms);
reset_synonyms_1: |-
  client.index("movies").resetSynonymsSettings();
get_stop_words_1: |-
  client.index("movies").getStopWordsSettings();
update_stop_words_1: |-
  client.index("movies").updateStopWordsSettings(new String[] {"of", "the", "to"});
reset_stop_words_1: |-
  client.index("movies").resetStopWordsSettings();
get_ranking_rules_1: |-
  client.index("movies").getRankingRulesSettings();
update_ranking_rules_1: |-
  Settings settings = new Settings();
  settings.setRankingRules(new String[]
  {
    "words",
    "typo",
    "proximity",
    "attribute",
    "sort",
    "exactness",
    "release_date:asc",
    "rank:desc"
  });
  client.index("movies").updateSettings(settings);
reset_ranking_rules_1: |-
  client.index("movies").resetRankingRulesSettings();
get_distinct_attribute_1: |-
  client.index("shoes").getDistinctAttributeSettings();
update_distinct_attribute_1: |-
  client.index("shoes").updateDistinctAttributeSettings("skuid");
reset_distinct_attribute_1: |-
  client.index("shoes").resetDistinctAttributeSettings();
get_searchable_attributes_1: |-
  client.index("movies").getSearchableAttributesSettings();
update_searchable_attributes_1: |-
  client.index("movies").updateSearchableAttributesSettings(new String[]
  {
    "title",
    "overview",
    "genres"
  });
reset_searchable_attributes_1: |-
  client.index("movies").resetSearchableAttributesSettings();
get_filterable_attributes_1: |-
  client.index("movies").getFilterableAttributesSettings();
update_filterable_attributes_1: |-
  Settings settings = new Settings();
  settings.setFilterableAttributes(new String[] {"genres", "director"});
  client.index("movies").updateSettings(settings);
reset_filterable_attributes_1: |-
  client.index("movies").resetFilterableAttributesSettings();
get_displayed_attributes_1: |-
  client.index("movies").getDisplayedAttributesSettings();
update_displayed_attributes_1: |-
  client.index("movies").updateDisplayedAttributesSettings(new String[]
  {
    "title",
    "overview",
    "genres",
    "release_date"
  });
reset_displayed_attributes_1: |-
  client.index("movies").resetDisplayedAttributesSettings();
getting_started_typo_tolerance: |-
  HashMap<String, Integer> minWordSizeTypos =
  new HashMap<String, Integer>() {
    {
      put("oneTypo", 4);
    }
  };

  TypoTolerance typoTolerance = new TypoTolerance();
  typoTolerance.setMinWordSizeForTypos(minWordSizeTypos);

  client.index("movies").updateTypoToleranceSettings(typoTolerance);
get_typo_tolerance_1:
  client.index("books").getTypoToleranceSettings();
update_typo_tolerance_1: |-
  TypoTolerance typoTolerance = new TypoTolerance();
  HashMap<String, Integer> minWordSizeTypos =
          new HashMap<String, Integer>() {
              {
                  put("oneTypo", 4);
                  put("twoTypos", 10);
              }
          };

  typoTolerance.setMinWordSizeForTypos(minWordSizeTypos);
  typoTolerance.setDisableOnAttributes(new String[] {"title"});

  client.index("books").updateTypoToleranceSettings(typoTolerance);
reset_typo_tolerance_1: |-
  client.index("books").resetTypoToleranceSettings();
get_pagination_settings_1:
update_pagination_settings_1: |-
reset_pagination_settings_1: |-
get_faceting_settings_1: |-
update_faceting_settings_1: |-
reset_faceting_settings_1: |-
get_index_stats_1: |-
  client.index("movies").getStats();
get_indexes_stats_1: |-
  client.getStats();
get_health_1: |-
  client.health();
get_version_1: |-
  client.getVersion();
distinct_attribute_guide_1: |-
  Settings settings = new Settings();
  settings.setDistinctAttribute("product_id");
  client.index("jackets").updateSettings(settings);
field_properties_guide_searchable_1: |-
  Settings settings = new Settings();
  settings.setSearchableAttributes(new String[]
  {
    "title",
    "overview",
    "genres"
  });
  client.index("movies").updateSettings(settings);
field_properties_guide_displayed_1: |-
  Settings settings = new Settings();
  settings.setDisplayedAttributes(new String[]
  {
    "title",
    "overview",
    "genres",
    "release_date"
  });
  client.index("movies").updateSettings(settings);
filtering_guide_1: |-
  SearchRequest searchRequest =
    new SearchRequest("Avengers").setFilter(new String[] {"release_date > \"795484800\""});
  client.index("movies").search(searchRequest);
filtering_guide_2: |-
  SearchRequest searchRequest =
    new SearchRequest("Batman").setFilter(new String[] {"release_date > 795484800 AND (director = \"Tim Burton\" OR director = \"Christopher Nolan\")"});
  client.index("movies").search(searchRequest);
filtering_guide_3: |-
  SearchRequest searchRequest =
    new SearchRequest("Planet of the Apes").setFilter(new String[] {"rating >= 3 AND (NOT director = \"Tim Burton\")"});
  client.index("movies").search(searchRequest);
search_parameter_guide_query_1: |-
  client.index("movies").search("shifu");
search_parameter_guide_offset_1: |-
  SearchRequest searchRequest = new SearchRequest("shifu").setOffset(1);
  client.index("movies").search(searchRequest);
search_parameter_guide_limit_1: |-
  SearchRequest searchRequest = new SearchRequest("shifu").setLimit(2);
  client.index("movies").search(searchRequest);
search_parameter_guide_retrieve_1: |-
  SearchRequest searchRequest =
    new SearchRequest("a").setAttributesToRetrieve(new String[] {"overview", "title"});
  client.index("movies").search(searchRequest);
search_parameter_guide_crop_1: |-
  SearchRequest searchRequest =
          SearchRequest.builder()
                  .q("shifu")
                  .attributesToCrop(new String[] {"overview"})
                  .cropLength(5)
                  .build();
  client.index("movies").search(searchRequest);
search_parameter_guide_crop_marker_1: |-
  SearchRequest searchRequest =
          SearchRequest.builder()
                  .q("shifu")
                  .attributesToCrop(new String[] {"overview"})
                  .cropMarker("[…]")
                  .build();
  client.index("movies").search(searchRequest);
search_parameter_guide_highlight_1: |-
  SearchRequest searchRequest =
    new SearchRequest("winter feast").setAttributesToHighlight(new String[] {"overview"});
  client.index("movies").search(searchRequest);
search_parameter_guide_highlight_tag_1: |-
  SearchRequest searchRequest =
          SearchRequest.builder()
                  .q("winter feast")
                  .attributesToHighlight(new String[] {"overview"})
                  .highlightPreTag("<span class=\"highlight\">")
                  .highlightPostTag("</span>")
                  .build();
  client.index("movies").search(searchRequest);
search_parameter_guide_matches_1: |-
  SearchRequest searchRequest = SearchRequest.builder().q("winter feast").matches(true).build();
  client.index("movies").search(searchRequest);
search_parameter_guide_hitsperpage_1: |-
  SearchRequest searchRequest = SearchRequest.builder().q("").hitsPerPage(15).build();
  SearchResultPaginated searchResult = client.index("movies").search(searchRequest);
search_parameter_guide_page_1: |-
  SearchRequest searchRequest = SearchRequest.builder().q("").page(15).build();
  SearchResultPaginated searchResult = client.index("movies").search(searchRequest);
search_parameter_guide_show_matches_position_1: |-
  SearchRequest searchRequest = SearchRequest.builder().q("winter feast").showMatchesPosition(true).build();
  SearchResultPaginated searchResult = client.index("movies").search(searchRequest);
search_parameter_guide_matching_strategy_1: |-
  SearchRequest searchRequest = SearchRequest.builder().q("big fat liar").matchingStrategy(MatchingStrategy.LAST).build();
  client.index("movies").search(searchRequest);
search_parameter_guide_matching_strategy_2: |-
  SearchRequest searchRequest = SearchRequest.builder().q("big fat liar").matchingStrategy(MatchingStrategy.ALL).build();
  client.index("movies").search(searchRequest);
settings_guide_synonyms_1: |-
  Settings settings = new Settings();
  HashMap<String, String[]> synonyms = new HashMap<String, String[]>();
  synonyms.put("sweater", new String[] {"jumper"});
  synonyms.put("jumper", new String[] {"sweater"});
  settings.setSynonyms(synonyms);
  client.index("tops").updateSettings(settings);
settings_guide_stop_words_1: |-
  Settings settings = new Settings();
  settings.setStopWords(new String[]
  {
    "the",
    "a",
    "an"
  });
  client.index("movies").updateSettings(settings);
settings_guide_ranking_rules_1: |-
  Settings settings = new Settings();
  settings.setRankingRules(new String[]
  {
    "words",
    "typo",
    "proximity",
    "attribute",
    "sort",
    "exactness",
    "release_date:asc",
    "rank_desc"
  });
  client.index("movies").updateSettings(settings);
settings_guide_distinct_1: |-
  Settings settings = new Settings();
  settings.setDistinctAttribute("product_id");
  client.index("jackets").updateSettings(settings);
settings_guide_searchable_1: |-
  Settings settings = new Settings();
  settings.setSearchableAttributes(new String[]
  {
    "title",
    "overview",
    "genres"
  });
  client.index("movies").updateSettings(settings);
settings_guide_displayed_1: |-
  Settings settings = new Settings();
  settings.setDisplayedAttributes(new String[]
  {
    "title",
    "overview",
    "genres",
    "release_date"
  });
  client.index("movies").updateSettings(settings);
settings_guide_sortable_1: |-
  Settings settings = new Settings();
  settings.setSortableAttributes(new String[]
  {
    "price",
    "author",
  });
  client.index("books").updateSettings(settings);
settings_guide_faceting_1: |-
settings_guide_pagination_1: |-
settings_guide_typo_tolerance_1: |-
  TypoTolerance typoTolerance = new TypoTolerance();
  HashMap<String, Integer> minWordSizeTypos =
          new HashMap<String, Integer>() {
              {
                  put("twoTypos", 12);
              }
          };

  typoTolerance.setMinWordSizeForTypos(minWordSizeTypos);
  typoTolerance.setDisableOnAttributes(new String[] {"title"});

  client.index("movies").updateTypoToleranceSettings(typoTolerance);
synonyms_guide_1: |-
  HashMap<String, String[]> synonyms = new HashMap<String, String[]>();
  synonyms.put("great", new String[] {"fantastic"});
  synonyms.put("fantastic", new String[] {"great"});

  client.index("movies").updateSynonymsSettings(synonyms);
typo_tolerance_guide_1: |-
  TypoTolerance typoTolerance = new TypoTolerance();
  typoTolerance.setEnabled(false);
  client.index("movies").updateTypoToleranceSettings(typoTolerance);
typo_tolerance_guide_2: |-
  TypoTolerance typoTolerance = new TypoTolerance();
  typoTolerance.setDisableOnAttributes(new String[] {"title"});
  client.index("movies").updateTypoToleranceSettings(typoTolerance);
typo_tolerance_guide_3: |-
  TypoTolerance typoTolerance = new TypoTolerance();
  typoTolerance.setDisableOnWords(new String[] {"shrek"});
  client.index("movies").updateTypoToleranceSettings(typoTolerance);
typo_tolerance_guide_4: |-
  TypoTolerance typoTolerance = new TypoTolerance();
    HashMap<String, Integer> minWordSizeTypos =
          new HashMap<String, Integer>() {
              {
                  put("oneTypo", 4);
                  put("twoTypos", 10);
              }
          };
  typoTolerance.setMinWordSizeForTypos(minWordSizeTypos);
  client.index("movies").updateTypoToleranceSettings(typoTolerance);
documents_guide_add_movie_1: |-
  client.index("movies").addDocuments("[{"
    + "\"movie_id\": 123sq178,"
    + "\"title\": \"Amelie Poulain\""
    + "}]"
  );
getting_started_add_documents_md: |-
  **Maven**
  Add the following code to the `<dependencies>` section of your project:
  ```xml
  <dependency>
    <groupId>com.meilisearch.sdk</groupId>
    <artifactId>meilisearch-java</artifactId>
    <version>0.11.0</version>
    <type>pom</type>
  </dependency>
  ```

  **Gradle**
  Add the following line to the `dependencies` section of your `build.gradle`:
  ```groovy
  implementation 'com.meilisearch.sdk:meilisearch-java:0.11.0'
  ```

  ```java
  import com.meilisearch.sdk;
  import java.nio.file.Files;
  import java.nio.file.Path;

  Path fileName = Path.of("movies.json");
  String moviesJson = Files.readString(fileName);
  Client client = new Client(new Config("http://localhost:7700", "masterKey"));
  Index index = client.index("movies");
  index.addDocuments(moviesJson);
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-java)
getting_started_check_task_status: |-
  client.getTask(0);
getting_started_search_md: |-
  ```java
  client.index("movies").search("botman");
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-java)
getting_started_add_meteorites: |-
  import com.meilisearch.sdk;
  import org.json.JSONArray;
  import java.nio.file.Files;
  import java.nio.file.Path;
  
  Path fileName = Path.of("meteorites.json");
  String meteoritesJson = Files.readString(fileName);
  Client client = new Client(new Config("http://localhost:7700", "masterKey"));

  client.index("meteorites").addDocuments(meteoritesJson);
getting_started_update_ranking_rules: |-
  Settings settings = new Settings();
  settings.setRankingRules(new String[]
  {
    "exactness",
    "words",
    "typo",
    "proximity",
    "attribute",
    "sort",
    "release_date:asc",
    "rank:desc"
  });
  client.index("movies").updateSettings(settings);
getting_started_update_displayed_attributes: |-
  Settings settings = new Settings();
  settings.setDisplayedAttributes(new String[]
  {
        "title",
        "overview",
        "poster"
  });
  client.index("movies").updateSettings(settings);
getting_started_update_searchable_attributes: |-
  Settings settings = new Settings();
  settings.setSearchableAttributes(new String[]
  {
    "title"
  });
getting_started_update_stop_words: |-
  Settings settings = new Settings();
  settings.setStopWords(new String[]
  {
    "the"
  });
  client.index("movies").updateSettings(settings);
getting_started_synonyms: |-
  Settings settings = new Settings();
  HashMap<String, String[]> synonyms = new HashMap<String, String[]>();
  synonyms.put("winnie", new String[] {"piglet"});
  synonyms.put("piglet", new String[] {"winnie"});
  settings.setSynonyms(synonyms);
  client.index("movies").updateSettings(settings);
getting_started_filtering: |-
  SearchRequest searchRequest =
    new SearchRequest("").setFilter(new String[] {"mass < 200"});
  client.index("meteorites").search(searchRequest);
getting_started_geo_radius: |-
  SearchRequest searchRequest =
    new SearchRequest("").setFilter(new String[] {"_geoRadius(46.9480, 7.4474, 210000)"});
  client.index("meteorites").search(searchRequest); 
getting_started_geo_point: |-
  SearchRequest searchRequest =
    new SearchRequest("").setSort(new String[] {"_geoPoint(48.8583701,2.2922926):asc"});
  client.index("meteorites").search(searchRequest);
getting_started_sorting: |-
  SearchRequest searchRequest = new SearchRequest("")
    .setFilter(new String[] {"mass < 200"})
    .setSort(new String[] {"mass:asc"});
  client.index("meteorites").search(searchRequest);
getting_started_configure_settings: |-
  Settings settings = new Settings();
  settings.setFilterableAttributes(new String[] {"mass", "_geo"});
  settings.setSortableAttributes(new String[] {"mass", "_geo"});
  client.index("meteorites").updateSettings(settings);
getting_started_communicating_with_a_protected_instance: |-
  Client client = new Client(new Config("http://localhost:7700", "apiKey"));
  
  client.index("movies").search(new SearchRequest(""));
getting_started_faceting: |-
getting_started_pagination: |-
faceted_search_update_settings_1: |-
  client.index("movies").updateFilterableAttributesSettings(new String[]
  {
    "director",
    "genres"
  });
faceted_search_filter_1: |-
  SearchRequest searchRequest =
    new SearchRequest("thriller").setFilterArray(new String[][] {
      new String[] {"genres = Horror", "genres = Mystery"},
      new String[] {"director = \"Jordan Peele\""}});
  client.index("movies").search(searchRequest);
faceted_search_facets_1: |-
  SearchRequest searchRequest =
    new SearchRequest("Batman").setFacets(new String[] {"genres"});
  client.index("movies").search(searchRequest);
faceted_search_walkthrough_filter_1: |-
  SearchRequest searchRequest =
    new SearchRequest("thriller").setFilterArray(new String[][] {
      new String[] {"genres = Horror", "genres = Mystery"},
      new String[] {"director = \"Jordan Peele\""}});
  client.index("movies").search(searchRequest);
add_movies_json_1: |-
  import com.meilisearch.sdk;
  import org.json.JSONArray;
  import java.nio.file.Files;
  import java.nio.file.Path;

  Path fileName = Path.of("movies.json");
  String moviesJson = Files.readString(fileName);
  Client client = new Client(new Config("http://localhost:7700", "masterKey"));
  Index index = client.index("movies");
  index.addDocuments(moviesJson);
landing_getting_started_1: |-
  Client client = new Client(new Config("http://localhost:7700", "masterKey"));

  client.index("movies").addDocuments("["
    + "{\"id\": 1, \"title\": \"Carol\"},"
    + "{\"id\": 2, \"title\": \"Wonder Woman\"},"
    + "{\"id\": 3, \"title\": \"Life of Pi\"},"
    + "{\"id\": 4, \"title\": \"Mad Max: Fury Road\"},"
    + "{\"id\": 5, \"title\": \"Moana\"},"
    + "{\"id\": 6, \"title\": \"Philadelphia\"}"
    + "]"
  );
post_dump_1: |-
  client.createDump();
phrase_search_1: |-
  client.index("movies").search("\"african american\" horror");
sorting_guide_update_sortable_attributes_1: |-
  Settings settings = new Settings();
  settings.setSortableAttributes(new String[] {"price", "author"});
  client.index("books").updateSettings(settings);
sorting_guide_update_ranking_rules_1: |-
  Settings settings = new Settings();
  settings.setRankingRules(new String[]
  {
    "words",
    "sort",
    "typo",
    "proximity",
    "attribute",
    "exactness"
  });
  client.index("books").updateSettings(settings);
sorting_guide_sort_parameter_1: |-
  SearchRequest searchRequest = new SearchRequest("science fiction").setSort(new String[] {"price:asc"});
  client.index("books").search(searchRequest);
sorting_guide_sort_parameter_2: |-
  SearchRequest searchRequest = new SearchRequest("butler").setSort(new String[] {"author:desc"});
  client.index("books").search(searchRequest);
get_sortable_attributes_1: |-
  client.index("books").getSettings().getSortableAttributes();
update_sortable_attributes_1: |-
  Settings settings = new Settings();
  settings.setSortableAttributes(new String[] {"price", "author"});
  client.index("books").updateSettings(settings);
reset_sortable_attributes_1: |-
search_parameter_guide_sort_1: |-
  SearchRequest searchRequest = new SearchRequest("science fiction").setSort(new String[] {"price:asc"});
  client.index("search_parameter_guide_sort_1").search(searchRequest);
geosearch_guide_filter_settings_1: |-
  Settings settings = new Settings();
  settings.setFilterableAttributes(new String[] {"_geo"});
  client.index("restaurants").updateSettings(settings);
geosearch_guide_filter_usage_1: |-
  SearchRequest searchRequest =
    new SearchRequest("").setFilter(new String[] {"_geoRadius(45.472735, 9.184019, 2000)"});
  client.index("restaurants").search(searchRequest);
geosearch_guide_filter_usage_2: |-
  SearchRequest searchRequest =
    new SearchRequest("").setFilter(new String[] {"_geoRadius(45.472735, 9.184019, 2000) AND type = pizza"});
  client.index("restaurants").search(searchRequest);
geosearch_guide_sort_settings_1: |-
  Settings settings = new Settings();
  settings.setSortableAttributes(new String[] {"_geo"});
  client.index("restaurants").updateSettings(settings);
geosearch_guide_sort_usage_1: |-
  SearchRequest searchRequest =
    new SearchRequest("").setSort(new String[] {"_geoPoint(48.8561446,2.2978204):asc"});
  client.index("restaurants").search(searchRequest);
geosearch_guide_sort_usage_2: |-
  SearchRequest searchRequest =
    new SearchRequest("").setSort(new String[] {
      "_geoPoint(48.8561446,2.2978204):asc",
      "rating:desc",
    });
  client.index("restaurants").search(searchRequest);
primary_field_guide_update_document_primary_key: |-
  client.updateIndex("books", "title");
primary_field_guide_create_index_primary_key: |-
  client.createIndex("books", "reference_number");
primary_field_guide_add_document_primary_key: |-
  client.index("books").addDocuments("[{"
    + "\"reference_number\": 2879,"
    + "\"title\": \"Diary of a Wimpy Kid\","
    + "\"author\": \"Jeff Kinney\","
    + "\"genres\": [\"comedy\", \"humor\"],"
    + "\"price\": 5.00"
    + "}]"
  , "reference_number");
security_guide_search_key_1: |-
  Client client = new Client(new Config("http://localhost:7700", "apiKey"));
  client.index("patient_medical_records").search();
security_guide_update_key_1: |-
  Client client = new Client(new Config("http://localhost:7700", "masterKey"));
  client.updateKey("74c9c733-3368-4738-bbe5-1d18a5fecb37", new KeyUpdate().setDescription("Default Search API Key"));
security_guide_create_key_1: |-
  Client client = new Client(new Config("http://localhost:7700", "masterKey"));

  SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
  Date dateParsed = format.parse("2023-01-01T00:00:00Z");

  Key keyInfo = new Key();

  keyInfo.setDescription("Search patient records key");
  keyInfo.setActions(new String[] {"search"});
  keyInfo.setIndexes(new String[] {"patient_medical_records"});
  keyInfo.setExpiresAt(dateParsed);

  client.createKey(keyInfo);
security_guide_list_keys_1: |-
  Client client = new Client(new Config("http://localhost:7700", "masterKey"));
  client.getKeys();
security_guide_delete_key_1: |-
  Client client = new Client(new Config("http://localhost:7700", "masterKey"));
  client.deleteKey("c5cd97d-5a4b-4226-a868-2d0eb6d197ab");
authorization_header_1: |-
  Client client = new Client(new Config("http://localhost:7700", "masterKey"));
  client.getKeys();
tenant_token_guide_generate_sdk_1: |-
  Map<String, Object> filters = new HashMap<String, Object>();
  filters.put("filter", "user_id = 1");
  Map<String, Object> searchRules = new HashMap<String, Object>();
  searchRules.put("patient_medical_records", filters);

  Date expiresAt = new SimpleDateFormat("yyyy-MM-dd").parse("2025-12-20");
  TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
  TenantTokenOptions options = new TenantTokenOptions();
  options.setApiKey("B5KdX2MY2jV6EXfUs6scSfmC...");
  options.setExpiresAt(expiresAt);

  String token = client.generateTenantToken("85c3c2f9-bdd6-41f1-abd8-11fcf80e0f76", searchRules, options);
tenant_token_guide_search_sdk_1: |-
  Client frontEndClient = new Client(new Config("http://localhost:7700", token));
  frontEndClient.index("patient_medical_records").search("blood test");
date_guide_index_1: |-
  import com.meilisearch.sdk;
  import org.json.JSONArray;
  import java.nio.file.Files;
  import java.nio.file.Path;

  Path fileName = Path.of("games.json");
  String gamesJson = Files.readString(fileName);
  Index index = client.index("games");
  index.addDocuments(gamesJson);
date_guide_filterable_attributes_1: |-
  client.index("movies").updateFilterableAttributesSettings(new String[] { "release_timestamp" });
date_guide_filter_1: |-
  SearchRequest searchRequest =
    new SearchRequest("").setFilter(new String[] {"release_timestamp >= 1514761200 AND release_timestamp < 1672527600"});
  client.index("games").search(searchRequest);
date_guide_sortable_attributes_1: |-
  Settings settings = new Settings();
  settings.setSortableAttributes(new String[] {"release_timestamp"});
  client.index("games").updateSettings(settings);
date_guide_sort_1: |-
  SearchRequest searchRequest = new SearchRequest("").setSort(new String[] {"release_timestamp:desc"});
  client.index("games").search(searchRequest);
async_guide_filter_by_date_1: |-
  SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
  Date date = format.parse("2020-10-11T11:49:53.000Z");
  TasksQuery query = new TasksQuery().setBeforeEnqueuedAt(date);

  client.getTasks(query);
async_guide_multiple_filters_1: |-
  TasksQuery query =
          new TasksQuery()
                  .setStatuses(new String[] {"processing"})
                  .setTypes(new String[] {"documentAdditionOrUpdate", "documentDeletion"})
                  .setIndexUids(new String[] {"movies"});

  client.getTasks(query);
async_guide_filter_by_ids_1: |-
  TasksQuery query = new TasksQuery().setUids(new int[] {5, 10, 13});
  client.getTasks(query);
async_guide_filter_by_statuses_1: |-
  TasksQuery query = new TasksQuery().setStatuses(new String[] {"failed", "canceled"});
  client.getTasks(query);
async_guide_filter_by_types_1: |-
  TasksQuery query = new TasksQuery().setTypes(new String[] {"dumpCreation", "indexSwap"});
  client.getTasks(query);
async_guide_filter_by_index_uids_1: |-
  TasksQuery query = new TasksQuery().setIndexUids(new String[] {"movies"});
  client.getTasks(query);
async_guide_canceled_by_1: |-
  TasksQuery query = new TasksQuery().setCanceledBy(new int[] {9, 15});
  client.getTasks(query);
